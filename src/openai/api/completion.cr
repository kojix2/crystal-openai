require "json"
require "./usage"
require "../stream"

module OpenAI
  class CompletionRequest
    include JSON::Serializable

    def initialize(@model, @prompt = "", @suffix = nil, @max_tokens = 16, @temperature = 1.0, @top_p = 1.0, @num_completions = 1, @stream = false, @logprobs = nil,
                   @echo = false, @stop = nil, @presence_penalty = 0.0, @frequency_penalty = 0.0, @best_of = 1, @logit_bias = nil, @user = nil)
    end

    # the model id
    property model : String

    # The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
    # Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model
    # will generate as if from the beginning of a new document.
    property prompt : String | Array(String) = ""

    # The suffix that comes after a completion of inserted text.
    property suffix : String? = nil

    # The maximum number of tokens to generate in the completion.
    # The token count of your prompt plus max_tokens cannot exceed the model's context length.
    property max_tokens : Int32 = 16

    # What sampling temperature to use, between 0 and 2.
    # Higher values like 0.8 will make the output more random,
    # while lower values like 0.2 will make it more focused and deterministic.
    property temperature : Float64 = 1.0

    # An alternative to sampling with temperature, called nucleus sampling,
    # where the model considers the results of the tokens with top_p probability mass.
    # So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    # Alter this or temperature but not both.
    # We generally recommend altering this or temperature but not both.
    property top_p : Float64 = 1.0

    # How many completions to generate for each prompt.
    # Note: Because this parameter generates many completions, it can quickly consume your token quota.
    # Use carefully and ensure that you have reasonable settings for max_tokens and stop.
    @[JSON::Field(key: "n")]
    property num_completions : Int32 = 1

    # Whether to stream back partial progress.
    # If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
    property stream : Bool = false

    # Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens.
    # For example, if logprobs is 5, the API will return a list of the 5 most likely tokens.
    # The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
    property logprobs : Int32? = nil

    # Echo back the prompt in addition to the completion
    property echo : Bool = false

    # Up to 4 sequences where the API will stop generating further tokens.
    # The returned text will not contain the stop sequence.
    property stop : String | Array(String)? = nil

    # Number between -2.0 and 2.0.
    # Positive values penalize new tokens based on whether they appear in the text so far,
    # increasing the model's likelihood to talk about new topics.
    property presence_penalty : Float64 = 0.0

    # Number between -2.0 and 2.0.
    # Positive values penalize new tokens based on their existing frequency in the text so far,
    # decreasing the model's likelihood to repeat the same line verbatim.
    property frequency_penalty : Float64 = 0.0

    # Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
    # When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.
    #
    # Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.
    property best_of : Int32 = 1

    # Modify the likelihood of specified tokens appearing in the completion.
    # Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100.
    # You can use this [tokenizer tool](https://platform.openai.com/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs.
    # Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model,
    # but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
    #
    # As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
    property logit_bias : Hash(String, Float64)? = nil

    # A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
    property user : String? = nil
  end

  record CompletionChoice, text : String, index : Int32, logprobs : LogprobResult?, finish_reason : FinishReason do
    include JSON::Serializable
  end

  record LogprobResult, tokens : Array(String), token_logprobs : Array(Float64), top_logprobs : Hash(String, Float64), text_offset : Array(Int32) do
    include JSON::Serializable
  end

  struct CompletionResponse
    include JSON::Serializable

    # A unique identifier for the completion.
    getter id : String

    # The object type, which is always "text_completion"
    getter object : String

    # The Unix timestamp (in seconds) of when the completion was created.
    @[JSON::Field(converter: Time::EpochConverter)]
    getter created : Time

    # The model used for the completion.
    getter model : String

    # The list of completion choices the model generated for the input prompt.
    getter choices : Array(CompletionChoice)

    # Usage statistics for the completion request.
    getter usage : Usage?
  end

  class CompletionStream < StreamReader(CompletionResponse)
  end
end
